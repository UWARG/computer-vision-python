"""
Create KML file from geolocation logs.
"""

from modules.common.mavlink.modules import drone_odometry
from modules.common.kml.modules import ground_locations_to_kml
from modules import drone_odometry_local
from modules.flight_interface import local_global_conversion
from modules.common.kml.modules import location_ground


HOME_LOCATION_LATITUDE = 43.47445297241211 # degrees
HOME_LOCATION_LONGITUDE = -80.55301666259766 # degrees
HOME_LOCATION_ALTITUDE = 336.25  # metres above sea level


def main() -> int:
    """
    Main function.
    """
    geolocation_coordinates = [
        [2.790659928834995, 16.874113944870896], [2.623356099877902, 17.008544774530296], [2.626147444275784, 16.690409828892125], [2.4602290227113843, 16.8232329559531],
        [2.6248, 16.849],
        [-1.7217417129688413, 12.781458905271222], [-1.8790325733519717, 12.887588926530112], [-1.8295993078138812, 12.619647319312024], [-1.986949665353001, 12.725696635517638],
        [-1.8543, 12.754],
        [-4.534619877314564, 8.561474015586832], [-4.699962814408373, 8.680765438049978], [-4.64662925743775, 8.395530639325083], [-4.812511581455281, 8.514232508612633],
        [-4.6733, 8.5379],
        [-0.3896708546718805, 10.90143017460312], [-0.5612814969385918, 11.010820921328301], [-0.5008794534653555, 10.727316361956749], [-0.6724063847345413, 10.836477790440648],
        [-0.53106, 10.869],
        [0.9859127788731491, 10.988293050232368], [0.8575708310913416, 10.846071894332328], [1.1377052556484528, 10.8658105859535], [1.0088059097521276, 10.72295674606246],
        [0.99733, 10.856],
        [-2.9298171502249986, 15.17711906382994], [-3.055846919692756, 15.0390657216696], [-2.7845336309596442, 15.05349715518809], [-2.9107711001170857, 14.91507428877176],
        [-2.9203, 15.046],
        [2.494198997580188, 8.119952340163575], [2.4023086752362186, 7.9923780947458525], [2.630390394826233, 8.029363399180271], [2.538210042301434, 7.901302285376601],
        [2.5162, 8.0108],
        [5.063378117540398, 9.823682992175764], [4.81708329727323, 9.916016920217123], [4.968479018923111, 9.607841607869501], [4.722704984698731, 9.7011464393237],
        [4.8926, 9.7623],
        [-4.6587159265035805, 6.648305380190666], [-4.843418206609145, 6.73241568724654], [-4.737097343585498, 6.451358430614076], [-4.922667072023882, 6.535675882920018],
        [-4.7904, 6.5921],
        [8.173172165068813, 3.315140771140099], [8.018912455815554, 3.1695465934038327], [8.323839299030269, 3.165197444580955], [8.169039588085463, 3.0191733530266736],
        [8.1711, 3.1674],
        [-15.965186062415532, 21.278327457256133], [-15.924364274055643, 21.487049981367043], [-16.176802378568492, 21.306314633679996], [-16.13607034805477, 21.51583041886965],
        [-16.05, 21.397],
        [-20.08115191935206, 13.01410200037896], [-20.08702090934152, 13.184627316983896], [-20.26498869213706, 12.993962647666349], [-20.27091090129696, 13.165282872435755],
        [-20.176, 13.09],
        [-18.327465687344034, 9.14375646769988], [-18.4115372201042, 9.322618872102364], [-18.504643364360323, 9.04034168872473], [-18.589393474897808, 9.220055668784852],
        [-18.458, 9.1818],
        [-19.68091248109127, 11.901751222660833], [-19.648213154542706, 12.071487222016376], [-19.846307544602336, 11.9161192869239], [-19.81347346459842, 12.086672968598377],
        [-19.747, 11.994],
        [-16.370913580055845, 19.744173481582973], [-16.554551932349153, 19.768530952323136], [-16.38767685418038, 19.56115941761046], [-16.57126932047408, 19.584451310125495],
        [-16.471, 19.665],
        [-4.1373978409859085, 22.407747996201742], [-3.9673999540034663, 22.521895007484925], [-4.258813805293411, 22.569507390023944], [-4.088322638214793, 22.684293690727205],
        [-4.1129, 22.546],
        [0.55766115749679, 12.407296611018072], [0.4297019629507724, 12.493753409878021], [0.4698383062432752, 12.27507454547856], [0.3418210953498789, 12.361501063867264],
        [0.44977, 12.384],
        [0.16921512752101706, 12.730217335371792], [0.04440558889144285, 12.814842542390213], [0.08336131922145988, 12.601830331993735], [-0.04149670272003058, 12.686436682059918],
        [0.063884, 12.708],
        [-0.2336184955382102, 13.548196437914639], [-0.34564028371902256, 13.626463222873518], [-0.31283709451625474, 13.434375196017337], [-0.4248374606121404, 13.512525092264468],
        [-0.32923, 13.53],
        [-0.9531831452666771, 13.153999362402107], [-1.056188239199809, 13.225002131752515], [-1.0231328847445402, 13.052085289194029], [-1.1261390260400979, 13.123022161502512],
        [-1.0397, 13.139],
        [-1.178295495931934, 13.118219519862457], [-1.2766205432838336, 13.186009760031851], [-1.2464711215265658, 13.019301695524538], [-1.3447803854388976, 13.087032479474708],
        [-1.2615, 13.103],
    ]

    result, home_location = drone_odometry.DronePosition.create(
        HOME_LOCATION_LATITUDE,
        HOME_LOCATION_LONGITUDE,
        HOME_LOCATION_ALTITUDE,
    )
    if not result:
        return False, None

    local_geolocation_coordinates = []
    for geolocation_coordinate in geolocation_coordinates:
        result, local_coordinate = drone_odometry_local.DronePositionLocal.create(
            geolocation_coordinate[0],
            geolocation_coordinate[1],
            0,
        )
        if not result:
            return False, None
        local_geolocation_coordinates.append(local_coordinate)

    ground_locations = []
    for i, local_geolocation_coordinate in enumerate(local_geolocation_coordinates):
        result, world_geolocation_coordinate = local_global_conversion.drone_position_global_from_local(
            home_location,
            local_geolocation_coordinate,
        )
        if not result:
            return False, None

        ground_location = location_ground.LocationGround(
            i,
            world_geolocation_coordinate.latitude,
            world_geolocation_coordinate.longitude,
        )
        if not result:
            return False, None
        ground_locations.append(ground_location)

    print(f"Number of coordinates: {len(ground_locations)}")

    result, file_path = ground_locations_to_kml.ground_locations_to_kml(
        ground_locations,
        "geolocation-flight-2",
        "./scripts",
    )
    if not result:
        return False, None
    
    print(f"KML file saved to: {file_path}")

    return 0


if __name__ == "__main__":
    result_main = main()
    if result_main < 0:
        print(f"ERROR: Status code: {result_main}")

    print("Done!")
