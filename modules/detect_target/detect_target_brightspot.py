"""
Detects bright spots generated by an IR camera.
"""

import time

import cv2
import numpy as np

from . import base_detect_target
from .. import image_and_time
from .. import detections_and_time


BRIGHTSPOT_THRESHOLD = 240


class DetectTargetBrightspot(base_detect_target.BaseDetectTarget):
    """
    Detects bright spots in images.
    """

    def __init__(
        self,
        show_annotations: bool = False,
        save_name: str = "",
    ) -> None:
        """
        Initializes the bright spot detector.

        show_annotations: Display annotated images.
        save_name: Filename prefix for logging detections and annotated images.
        """
        self.__counter = 0
        self.__show_annotations = show_annotations
        self.__filename_prefix = ""
        if save_name != "":
            self.__filename_prefix = f"{save_name}_{int(time.time())}_"

    def run(
        self, data: image_and_time.ImageAndTime
    ) -> "tuple[bool, detections_and_time.DetectionsAndTime | None]":
        """
        Runs brightspot detection on the provided image and returns the detections.

        data: Image with a timestamp.

        Return: Success, detections.
        """
        image = data.image
        gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        # Apply thresholding to isolate bright spots
        _, bw_image = cv2.threshold(gray_image, BRIGHTSPOT_THRESHOLD, 255, cv2.THRESH_BINARY)

        # Set up SimpleBlobDetector
        params = cv2.SimpleBlobDetector_Params()
        params.filterByColor = True
        params.blobColor = 255
        params.filterByCircularity = True
        params.minCircularity = 0.5
        detector = cv2.SimpleBlobDetector_create(params)
        keypoints = detector.detect(bw_image)
        if len(keypoints) == 0:
            return False, None

        # Annotate the image with detected keypoints
        image_annotated = cv2.drawKeypoints(
            image, keypoints, np.array([]), (0, 255, 0), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS
        )

        # Process bright spot detection
        result, detections = detections_and_time.DetectionsAndTime.create(data.timestamp)
        if not result:
            return False, None

        # Get Pylance to stop complaining
        assert detections is not None

        # Draw bounding boxes around detected keypoints
        for keypoint in keypoints:
            x, y = keypoint.pt
            size = keypoint.size
            bounds = np.array([x - size / 2, y - size / 2, x + size / 2, y + size / 2])
            confidence = keypoint.response
            result, detection = detections_and_time.Detection.create(bounds, 1, confidence)
            if result:
                # Get Pylance to stop complaining
                assert detections is not None

                detections.append(detection)

        # Logging
        if self.__filename_prefix != "":
            filename = self.__filename_prefix + str(self.__counter)

            # Object detections
            with open(filename + ".txt", "w", encoding="utf-8") as file:
                # Use internal string representation
                file.write(repr(detections))

            # Annotated image
            cv2.imwrite(filename + ".png", image_annotated)  # type: ignore

            self.__counter += 1

        if self.__show_annotations:
            cv2.imshow("Annotated", image_annotated)  # type: ignore

        return True, detections
